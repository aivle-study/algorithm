## 입력 조건
# 1. 첫째 줄에 집의 개수 N, 길의 개수 M 이 주어진다. (2 ≤ N ≤ 100,000, 정수) (1 ≤ M ≤ 1,000,000 정수)
# 2. 그다음 줄부터 M 줄에 걸쳐 길의 정보가 A, B, C 3개의 정수로 공백으로 구분되어 주어지는데
#    A 번 집과 B 번 집을 연결하는 길의 유지비가 C (1 ≤ C ≤ 1,000) 라는 뜻이다.

## 출력 조건
# 1. 첫 째줄에 길을 없애고 남은 유지비 합의 최솟값을 출력한다.

# 특정 원소가 속한 집합 찾기
def find_parent(parent, x):
    # 루트 노드가 아니라면, 루트 노드를 찾을 때까지 재귀적으로 호출
    if parent[x] != x:
        parent[x] = find_parent(parent, x)
    return parent[x]

# 두 원소가 속한 집합 찾기
def union_parent(parent, a, b):
    a = find_parent(parent, a)
    b = find_parent(parent, b)
    
    if a < b:
        parent[b] = a
    else:
        parent[a] = b
        
# 노드의 개수와 간선(union 연산)의 개수 입력받기
n, m = map(int, input().split())
parent = [0]*(n+1)

# 모든 간선을 담을 리스트와 최종 비용을 담을 변수
edge = []
cost = 0

# 부모 테이블상에서, 부모를 자기 자신으로 초기화
for i in range(1, n+1):
    parent[i] = i

# 모든 간선에 대한 정보를 입력받기
for _ in range(m):
    a, b, c = map(int, input().split())
    # 비용순으로 정렬하기 위해 튜플의 첫 번째 원소를 비용으로 설정
    edge.append((c,a,b))

# 간선을 비용순으로 정렬
edge.sort()
last = 0 # 최소 신장 트리에 포함되는 간선 중에서 가장 비용이 큰 간선

# 간선을 하나씩 확인하며
for e in edge:
    c, a, b = e
    # 사이클이 발생하지 않는 경우에만 집합에 포함
    if find_parent(parent, a) != find_parent(parent, b):
        union_parent(parent,a,b)
        cost += c
        last = c

print(cost - last)
