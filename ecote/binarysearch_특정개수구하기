## 입력 조건
# 1. 첫째 줄에 N 과 x 가 정수 형태로 공백으로 구분되어 입력됩니다.
#    (1 ≤ N ≤ 1,000,000), (-10^9 ≤ x ≤ 10^9)
# 2. 둘째 줄에 N 개의 원소가 정수 형태로 공백으로 구분되어 입력됩니다.
#    (-10^9 ≤ 각 원소의 값 ≤ 10^9)
## 출력 조건
# 1. 수열의 원소 중에서 값이 x 인 원소의 개수를 출력합니다.
#    (단, 값이 x 인 원소가 하나도 없다면 -1 을 출력합니다.)

# x의 가장 왼쪽 위치 찾기
def left(data, x, start, end):
    # x 가 없을 때
    if start > end:
        return None
    medi = (start+end) // 2
    # 가장 왼쪽에 있을 때, x 위치 반환
    if (medi == 0 or x > data[medi-1]) and data[medi] == x:
        return medi
    # 위치보다 x 가 큰 경우, 오른쪽 찾기
    elif data[medi] < x:
        return left(data, x, medi+1, end)
    # 위치보다 x 가 작은 경우, 왼쪽 찾기
    else:
        return left(data, x, start, medi-1)
    

# x 의 가장 오른쪽 위치 찾기
def right(data, x, start, end):
    # x 가 없을 때
    if start > end:
        return None
    medi = (start+end) // 2
    # 가장 오른쪽에 있을 때, x 위치 반환
    if (medi == n-1 or x < data[medi+1]) and data[medi] == x:
        return medi
    # 위치보다 x 가 작은 경우, 왼쪽 찾기
    elif data[medi] > x:
        return right(data, x ,start, medi-1)
    # 위치보다 x 가 큰 경우, 오른쪽 찾기
    else:
        return right(data, x, medi+1, end)

# x 개수 세기
def x_count(data, x):
    # 데이터 수
    n = len(data)
    
    # x 가장 왼쪽
    l = left(data, x, 0, n-1)
    
    # x 없을 때
    if l == None:
        return 0
    
    # x 가장 오른쪽
    r = right(data, x, 0, n-1)
    
    # 개수 반환
    return r-l+1

n, x = map(int, input().split())
data = list(map(int, input().split()))

# x 개수
cnt = x_count(data, x)

# x 없을 때
if cnt == 0:
    print(-1)
# x 있을 때
else:
    print(cnt)